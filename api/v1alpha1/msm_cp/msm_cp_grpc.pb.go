// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package msm_cp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsmControlPlaneClient is the client API for MsmControlPlane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsmControlPlaneClient interface {
	ClientConnect(ctx context.Context, in *Endpoints, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ClientRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ServerConnect(ctx context.Context, in *Endpoints, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ServerRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type msmControlPlaneClient struct {
	cc grpc.ClientConnInterface
}

func NewMsmControlPlaneClient(cc grpc.ClientConnInterface) MsmControlPlaneClient {
	return &msmControlPlaneClient{cc}
}

func (c *msmControlPlaneClient) ClientConnect(ctx context.Context, in *Endpoints, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/msm_cp.MsmControlPlane/ClientConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msmControlPlaneClient) ClientRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/msm_cp.MsmControlPlane/ClientRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msmControlPlaneClient) ServerConnect(ctx context.Context, in *Endpoints, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/msm_cp.MsmControlPlane/ServerConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msmControlPlaneClient) ServerRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/msm_cp.MsmControlPlane/ServerRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsmControlPlaneServer is the server API for MsmControlPlane service.
// All implementations should embed UnimplementedMsmControlPlaneServer
// for forward compatibility
type MsmControlPlaneServer interface {
	ClientConnect(context.Context, *Endpoints) (*emptypb.Empty, error)
	ClientRequest(context.Context, *Request) (*Response, error)
	ServerConnect(context.Context, *Endpoints) (*emptypb.Empty, error)
	ServerRequest(context.Context, *Request) (*Response, error)
}

// UnimplementedMsmControlPlaneServer should be embedded to have forward compatible implementations.
type UnimplementedMsmControlPlaneServer struct {
}

func (UnimplementedMsmControlPlaneServer) ClientConnect(context.Context, *Endpoints) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientConnect not implemented")
}
func (UnimplementedMsmControlPlaneServer) ClientRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientRequest not implemented")
}
func (UnimplementedMsmControlPlaneServer) ServerConnect(context.Context, *Endpoints) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerConnect not implemented")
}
func (UnimplementedMsmControlPlaneServer) ServerRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerRequest not implemented")
}

// UnsafeMsmControlPlaneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsmControlPlaneServer will
// result in compilation errors.
type UnsafeMsmControlPlaneServer interface {
	mustEmbedUnimplementedMsmControlPlaneServer()
}

func RegisterMsmControlPlaneServer(s grpc.ServiceRegistrar, srv MsmControlPlaneServer) {
	s.RegisterService(&MsmControlPlane_ServiceDesc, srv)
}

func _MsmControlPlane_ClientConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoints)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsmControlPlaneServer).ClientConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msm_cp.MsmControlPlane/ClientConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsmControlPlaneServer).ClientConnect(ctx, req.(*Endpoints))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsmControlPlane_ClientRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsmControlPlaneServer).ClientRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msm_cp.MsmControlPlane/ClientRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsmControlPlaneServer).ClientRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsmControlPlane_ServerConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoints)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsmControlPlaneServer).ServerConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msm_cp.MsmControlPlane/ServerConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsmControlPlaneServer).ServerConnect(ctx, req.(*Endpoints))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsmControlPlane_ServerRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsmControlPlaneServer).ServerRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msm_cp.MsmControlPlane/ServerRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsmControlPlaneServer).ServerRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// MsmControlPlane_ServiceDesc is the grpc.ServiceDesc for MsmControlPlane service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MsmControlPlane_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msm_cp.MsmControlPlane",
	HandlerType: (*MsmControlPlaneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientConnect",
			Handler:    _MsmControlPlane_ClientConnect_Handler,
		},
		{
			MethodName: "ClientRequest",
			Handler:    _MsmControlPlane_ClientRequest_Handler,
		},
		{
			MethodName: "ServerConnect",
			Handler:    _MsmControlPlane_ServerConnect_Handler,
		},
		{
			MethodName: "ServerRequest",
			Handler:    _MsmControlPlane_ServerRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msm_cp.proto",
}
