// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package msm_cp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsmControlPlaneClient is the client API for MsmControlPlane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsmControlPlaneClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (MsmControlPlane_ConnectClient, error)
}

type msmControlPlaneClient struct {
	cc grpc.ClientConnInterface
}

func NewMsmControlPlaneClient(cc grpc.ClientConnInterface) MsmControlPlaneClient {
	return &msmControlPlaneClient{cc}
}

func (c *msmControlPlaneClient) Connect(ctx context.Context, opts ...grpc.CallOption) (MsmControlPlane_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &MsmControlPlane_ServiceDesc.Streams[0], "/msm_cp.MsmControlPlane/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &msmControlPlaneConnectClient{stream}
	return x, nil
}

type MsmControlPlane_ConnectClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type msmControlPlaneConnectClient struct {
	grpc.ClientStream
}

func (x *msmControlPlaneConnectClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *msmControlPlaneConnectClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MsmControlPlaneServer is the server API for MsmControlPlane service.
// All implementations should embed UnimplementedMsmControlPlaneServer
// for forward compatibility
type MsmControlPlaneServer interface {
	Connect(MsmControlPlane_ConnectServer) error
}

// UnimplementedMsmControlPlaneServer should be embedded to have forward compatible implementations.
type UnimplementedMsmControlPlaneServer struct {
}

func (UnimplementedMsmControlPlaneServer) Connect(MsmControlPlane_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

// UnsafeMsmControlPlaneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsmControlPlaneServer will
// result in compilation errors.
type UnsafeMsmControlPlaneServer interface {
	mustEmbedUnimplementedMsmControlPlaneServer()
}

func RegisterMsmControlPlaneServer(s grpc.ServiceRegistrar, srv MsmControlPlaneServer) {
	s.RegisterService(&MsmControlPlane_ServiceDesc, srv)
}

func _MsmControlPlane_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MsmControlPlaneServer).Connect(&msmControlPlaneConnectServer{stream})
}

type MsmControlPlane_ConnectServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type msmControlPlaneConnectServer struct {
	grpc.ServerStream
}

func (x *msmControlPlaneConnectServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *msmControlPlaneConnectServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MsmControlPlane_ServiceDesc is the grpc.ServiceDesc for MsmControlPlane service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MsmControlPlane_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msm_cp.MsmControlPlane",
	HandlerType: (*MsmControlPlaneServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _MsmControlPlane_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "msm_cp.proto",
}
