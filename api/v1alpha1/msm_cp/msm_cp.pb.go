//
// Copyright (c) 2022 Cisco and/or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: msm_cp.proto

package msm_cp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Event int32

const (
	Event_REGISTER Event = 0
	Event_ADD      Event = 1
	Event_DELETE   Event = 2
	Event_DATA     Event = 3
)

// Enum value maps for Event.
var (
	Event_name = map[int32]string{
		0: "REGISTER",
		1: "ADD",
		2: "DELETE",
		3: "DATA",
	}
	Event_value = map[string]int32{
		"REGISTER": 0,
		"ADD":      1,
		"DELETE":   2,
		"DATA":     3,
	}
)

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}

func (x Event) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event) Descriptor() protoreflect.EnumDescriptor {
	return file_msm_cp_proto_enumTypes[0].Descriptor()
}

func (Event) Type() protoreflect.EnumType {
	return &file_msm_cp_proto_enumTypes[0]
}

func (x Event) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event.Descriptor instead.
func (Event) EnumDescriptor() ([]byte, []int) {
	return file_msm_cp_proto_rawDescGZIP(), []int{0}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event  Event  `protobuf:"varint,1,opt,name=event,proto3,enum=msm_cp.Event" json:"event,omitempty"`
	Local  string `protobuf:"bytes,2,opt,name=local,proto3" json:"local,omitempty"`
	Remote string `protobuf:"bytes,3,opt,name=remote,proto3" json:"remote,omitempty"`
	Data   string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msm_cp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_msm_cp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_msm_cp_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetEvent() Event {
	if x != nil {
		return x.Event
	}
	return Event_REGISTER
}

func (x *Message) GetLocal() string {
	if x != nil {
		return x.Local
	}
	return ""
}

func (x *Message) GetRemote() string {
	if x != nil {
		return x.Remote
	}
	return ""
}

func (x *Message) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_msm_cp_proto protoreflect.FileDescriptor

var file_msm_cp_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x73, 0x6d, 0x5f, 0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x6d, 0x73, 0x6d, 0x5f, 0x63, 0x70, 0x22, 0x70, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x6d, 0x73, 0x6d, 0x5f, 0x63, 0x70, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x34, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x41, 0x10, 0x03, 0x32, 0x3f,
	0x0a, 0x0f, 0x4d, 0x73, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x12, 0x2c, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x0f, 0x2e, 0x6d, 0x73, 0x6d, 0x5f,
	0x63, 0x70, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0f, 0x2e, 0x6d, 0x73, 0x6d,
	0x5f, 0x63, 0x70, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x43, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x65,
	0x73, 0x68, 0x2f, 0x6d, 0x73, 0x6d, 0x2d, 0x63, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6d, 0x73, 0x6d, 0x5f, 0x63, 0x70, 0x3b, 0x6d, 0x73,
	0x6d, 0x5f, 0x63, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msm_cp_proto_rawDescOnce sync.Once
	file_msm_cp_proto_rawDescData = file_msm_cp_proto_rawDesc
)

func file_msm_cp_proto_rawDescGZIP() []byte {
	file_msm_cp_proto_rawDescOnce.Do(func() {
		file_msm_cp_proto_rawDescData = protoimpl.X.CompressGZIP(file_msm_cp_proto_rawDescData)
	})
	return file_msm_cp_proto_rawDescData
}

var file_msm_cp_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_msm_cp_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_msm_cp_proto_goTypes = []interface{}{
	(Event)(0),      // 0: msm_cp.Event
	(*Message)(nil), // 1: msm_cp.Message
}
var file_msm_cp_proto_depIdxs = []int32{
	0, // 0: msm_cp.Message.event:type_name -> msm_cp.Event
	1, // 1: msm_cp.MsmControlPlane.Send:input_type -> msm_cp.Message
	1, // 2: msm_cp.MsmControlPlane.Send:output_type -> msm_cp.Message
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_msm_cp_proto_init() }
func file_msm_cp_proto_init() {
	if File_msm_cp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_msm_cp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msm_cp_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_msm_cp_proto_goTypes,
		DependencyIndexes: file_msm_cp_proto_depIdxs,
		EnumInfos:         file_msm_cp_proto_enumTypes,
		MessageInfos:      file_msm_cp_proto_msgTypes,
	}.Build()
	File_msm_cp_proto = out.File
	file_msm_cp_proto_rawDesc = nil
	file_msm_cp_proto_goTypes = nil
	file_msm_cp_proto_depIdxs = nil
}
